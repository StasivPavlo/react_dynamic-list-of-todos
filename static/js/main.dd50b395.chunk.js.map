{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","React","memo","todos","selectedUserId","onSelectUser","useState","visibleTodos","setVisibleTodos","filterTitle","setFilterTitle","selectedCompleting","setSelectedCompleting","handleFilter","useCallback","filter","todo","filterTitleLower","toLowerCase","titleLower","title","includes","completed","useEffect","className","htmlFor","type","name","id","value","onChange","event","target","map","checked","readOnly","classNames","userId","onClick","API_URL","getTodos","a","fetch","response","json","getUser","user","CurrentUser","onClearUser","setUser","then","userFS","email","phone","App","setSelectedUserId","setTodos","todosFS","selectUser","clearUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dd50b395.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport './TodoList.scss';\n\nimport classNames from 'classnames';\nimport { Todo } from '../../types/todo';\n\ntype SelectUser = (userId: number) => void;\n\ntype Props = {\n  todos: Todo[];\n  selectedUserId: number;\n  onSelectUser: SelectUser;\n};\n\nexport const TodoList: React.FC<Props> = React.memo(({\n  todos,\n  selectedUserId,\n  onSelectUser,\n}) => {\n  const [visibleTodos, setVisibleTodos] = useState<Todo[]>([]);\n  const [filterTitle, setFilterTitle] = useState('');\n  const [selectedCompleting, setSelectedCompleting] = useState('all');\n  const handleFilter = useCallback(() => {\n    setVisibleTodos(\n      todos.filter(todo => {\n        const filterTitleLower = filterTitle.toLowerCase();\n        const titleLower = todo.title.toLowerCase();\n\n        switch (selectedCompleting) {\n          case 'completed':\n            return titleLower.includes(filterTitleLower) && todo.completed;\n          case 'active':\n            return titleLower.includes(filterTitleLower) && !todo.completed;\n          case 'all':\n            return titleLower.includes(filterTitleLower);\n          default:\n            return todo;\n        }\n      }),\n    );\n  }, [filterTitle, selectedCompleting, todos]);\n\n  useEffect(() => {\n    handleFilter();\n  }, [todos, filterTitle, selectedCompleting]);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <div className=\"is-flex\">\n        <label className=\"label\" htmlFor=\"filterByTitle\">\n          Search:\n          <input\n            type=\"text\"\n            name=\"filterByTitle\"\n            className=\"TodoList__input-filter input is-small is-inline\"\n            id=\"filterByTitle\"\n            data-cy=\"filterByTitle\"\n            value={filterTitle}\n            onChange={(event) => {\n              setFilterTitle(event.target.value);\n            }}\n          />\n        </label>\n\n        <select\n          className=\"select\"\n          value={selectedCompleting}\n          onChange={(event) => {\n            setSelectedCompleting(event.target.value);\n          }}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Not completed</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </div>\n      <div className=\"TodoList__list-container\">\n        <ul\n          className=\"TodoList__list\"\n          data-cy=\"listOfTodos\"\n        >\n          {visibleTodos.map(todo => (\n            <li\n              key={todo.id}\n              className={`\n               TodoList__item\n               TodoList__item--${todo.completed ? 'checked' : 'unchecked'}\n               `}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={todo.completed}\n                  readOnly\n                />\n                <p>{todo.title}</p>\n              </label>\n              <button\n                className={classNames(\n                  'TodoList__user-button',\n                  'button',\n                  {\n                    'TodoList__user-button--selected':\n                        selectedUserId === todo.userId,\n                  },\n                )}\n                type=\"button\"\n                data-cy=\"userButton\"\n                onClick={() => {\n                  onSelectUser(todo.userId);\n                }}\n              >\n                {`User#${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n});\n","import { Todo } from './types/todo';\nimport { User } from './types/user';\n\nconst API_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = async (): Promise<Todo[]> => {\n  const response = await fetch((`${API_URL}/todos`));\n  const todos = await response.json();\n\n  return todos;\n};\n\nexport const getUser = async (userId: number): Promise<User | null> => {\n  try {\n    const response = await fetch(`${API_URL}/users/${userId}`);\n    const user = await response.json();\n\n    return user;\n  } catch (error) {\n    return null;\n  }\n};\n","import React, { useEffect, useState } from 'react';\nimport './CurrentUser.scss';\nimport { User } from '../../types/user';\nimport { getUser } from '../../api';\n\ntype Callback = () => void;\n\ntype Props = {\n  userId: number;\n  onClearUser: Callback;\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, onClearUser }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(userId).then(userFS => {\n      setUser(userFS);\n    });\n  }, [userId]);\n\n  return user ? (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          {`Selected user: ${user.id}`}\n        </span>\n      </h2>\n\n      <h3\n        data-cy=\"userName\"\n        className=\"CurrentUser__name\"\n      >\n        {user.name}\n      </h3>\n      <p className=\"CurrentUser__email\">{user.email}</p>\n      <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n      <button\n        type=\"button\"\n        name=\"clear\"\n        className=\"CurrentUser__button-clear button is-danger\"\n        onClick={onClearUser}\n      >\n        Clear\n      </button>\n    </div>\n  ) : (\n    <h2 className=\"CurrentUser__title\">\n      <span>\n        Please try again\n      </span>\n    </h2>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { Todo } from './types/todo';\nimport { getTodos } from './api';\n\nconst App: React.FC = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  const [todos, setTodos] = useState<Todo[]>([]);\n  // const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getTodos().then((todosFS) => {\n      setTodos(todosFS);\n    });\n  }, []);\n\n  const selectUser = useCallback((userId: number) => {\n    setSelectedUserId(userId);\n  }, []);\n\n  const clearUser = useCallback(() => {\n    setSelectedUserId(0);\n    // setUser(null);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          selectedUserId={selectedUserId}\n          onSelectUser={selectUser}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              onClearUser={clearUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}